import mysql.connector
import pydoc

import sys

class UserQueries:
    """
    A class to handle database operations related to users in the ChompTrack application.

    This class provides methods for creating, updating, retrieving, and deleting user records,
    as well as managing user dietary restrictions, intolerances, and attributes.
    """

    def __init__(self):
        """
        Initialize the database connection and cursor for executing queries.
        """
        self.connection = mysql.connector.connect(
            host=SQL_CREDENTIALS.get('host'),
            user=SQL_CREDENTIALS.get('user'),
            password=SQL_CREDENTIALS.get('password'), # type: ignore
            database=SQL_CREDENTIALS.get('database'),
            port=SQL_CREDENTIALS.get('port')
        )
        self.cursor = self.connection.cursor()

    def close_connection(self):
        """Close the database cursor and connection."""
        if self.connection.is_connected():
            self.cursor.close()
            self.connection.close()
            print("Connection closed")

    def update_completed(self, user_id):
        """Set the 'completed' status of a user to True."""
        sql_update_query = """UPDATE Users SET completed = TRUE WHERE user_id = %s"""
        self.cursor.execute(sql_update_query, (user_id,))
        self.connection.commit()

    def fetch_completed_status(self, user_id):
        """Fetch the 'completed' status of a user."""
        sql_select_query = """SELECT completed FROM Users WHERE user_id = %s"""
        self.cursor.execute(sql_select_query, (user_id,))
        result = self.cursor.fetchone()
        return bool(result[0]) if result else None

    def does_username_or_email_exist(self, username: str, email: str) -> bool:
        """Check if a given username or email already exists in the Users table."""
        query = """
        SELECT user_id FROM Users WHERE (username = %s OR email = %s)
        """
        self.cursor.execute(query, (username, email))
        result = self.cursor.fetchone()
        self.cursor.fetchall()  # Clear unread results
        return result is not None

    def insert_new_user(self, username: str, email: str, password: str) -> int:
        """Insert a new user into the Users table."""
        if not self.does_username_or_email_exist(username, email):
            insert_query = """
            INSERT INTO Users(username, email, password)
            VALUES (%s, %s, %s)
            """
            self.cursor.execute(insert_query, (username, email, password))
            self.connection.commit()
            return self.cursor.lastrowid
        return 0

    def logging_in_user(self, user_id):
        """Retrieve and return user details without the password for a logged-in user."""
        query = """
            SELECT username, email, gender, activityLevel, height, weight, age, protein, fats, carbohydrates, calories
            FROM Users WHERE user_id = %s
        """
        self.cursor.execute(query, (user_id,))
        result = self.cursor.fetchone()
        if result:
            return {
                'user_id': user_id,
                'username': result[0],
                'email': result[1],
                'gender': result[2],
                'activity_level': result[3],
                'height': float(result[4]),
                'weight': float(result[5]),
                'age': result[6],
                'protein': result[7],
                'fats': result[8],
                'carbohydrates': result[9],
                'calories': result[10],
                'logged_in': True
            }
        return None

    def get_all_attributes(self, user_id: int) -> dict:
        """Get all attributes of a specified user."""
        query = """
            SELECT gender, activityLevel, height, weight, age, protein, fats, carbohydrates, calories
            FROM Users WHERE user_id = %s
        """
        self.cursor.execute(query, (user_id,))
        result = self.cursor.fetchone()
        if result:
            return {
                'gender': result[0],
                'activity_level': result[1],
                'height': result[2],
                'weight': result[3],
                'age': result[4],
                'protein': result[5],
                'fats': result[6],
                'carbohydrates': result[7],
                'calories': result[8]
            }
        return None

    def update_all_attributes(self, user_id: int, gender: 'Gender' = None, activity_level: 'ActivityLevel' = None,
                              height: float = None, weight: float = None, age: int = None,
                              protein: int = None, fats: int = None, carbohydrates: int = None,
                              calories: int = None) -> bool:
        """Update user attributes with provided values."""
        current_attributes = self.get_all_attributes(user_id)
        if not current_attributes:
            return False
        # Set new values or keep existing ones
        new_gender = gender if gender else current_attributes['gender']
        new_activity_level = activity_level if activity_level else current_attributes['activity_level']
        new_height = height if height is not None else current_attributes['height']
        new_weight = weight if weight is not None else current_attributes['weight']
        new_age = age if age is not None else current_attributes['age']
        new_protein = protein if protein is not None else current_attributes['protein']
        new_fats = fats if fats is not None else current_attributes['fats']
        new_carbohydrates = carbohydrates if carbohydrates is not None else current_attributes['carbohydrates']
        new_calories = calories if calories is not None else current_attributes['calories']
        update_user_query = """
            UPDATE Users
            SET gender = %s, activityLevel = %s, height = %s, weight = %s, age = %s,
                protein = %s, fats = %s, carbohydrates = %s, calories = %s
            WHERE user_id = %s
        """
        self.cursor.execute(update_user_query, (new_gender, new_activity_level, new_height, new_weight, new_age,
                                                new_protein, new_fats, new_carbohydrates, new_calories, user_id))
        self.connection.commit()
        return True

    def find_user_id(self, username: str, email: str, password: str) -> int:
        """Find a user's ID based on their username, email, and password."""
        query = """
        SELECT user_id FROM Users WHERE (username = %s OR email = %s) AND password = %s
        """
        self.cursor.execute(query, (username, email, password))
        result = self.cursor.fetchone()
        self.cursor.fetchall()
        return result[0] if result else None

    def delete_user(self, username: str, email: str, password: str) -> bool:
        """Delete a user from the database after verifying their credentials."""
        user_id = self.find_user_id(username, email, password)
        if user_id is not None:
            delete_query = "DELETE FROM Users WHERE user_id = %s"
            self.cursor.execute(delete_query, (user_id,))
            self.connection.commit()
            return True
        return False

    def add_User_Intolerances(self, user_id: int, intolerances: list['Intolerances']):
        """Add user intolerances to the database."""
        for intolerance in intolerances:
            check_query = """
            SELECT * FROM UserIntolerances WHERE user_id = %s AND intolerance_name = %s
            """
            self.cursor.execute(check_query, (user_id, intolerance.name))
            exists = self.cursor.fetchone()
            if exists is None:
                insert_query = """
                INSERT INTO UserIntolerances (user_id, intolerance_name) VALUES (%s, %s)
                """
                self.cursor.execute(insert_query, (user_id, intolerance.name))
        self.connection.commit()

    def get_user_intolerances(self, user_id: int) -> dict:
        """Retrieve intolerances for a specific user from the UserIntolerances table."""
        query = "SELECT intolerance_name FROM UserIntolerances WHERE user_id = %s"
        self.cursor.execute(query, (user_id,))
        results = self.cursor.fetchall()
        intolerances_dict = {}
        if results:
            intolerances_list = ['Intolerances'[row[0].replace(' ', '_').upper()].value for row in results]
            intolerances_dict = {
                'user_id': user_id,
                'Intolerances': intolerances_list
            }
        return intolerances_dict

    def remove_User_intolerances(self, user_id: int, to_be_removed_intolerances: list['Intolerances']) -> bool:
        """Remove specified restrictions for a user from the UserIntolerances table."""
        if not to_be_removed_intolerances:
            return False
        delete_query = """
        DELETE FROM UserIntolerances WHERE user_id = %s AND intolerance_name = %s
        """
        for intolerance in to_be_removed_intolerances:
            self.cursor.execute(delete_query, (user_id, intolerance.value))
        self.connection.commit()
        return True

    # Methods for dietary restrictions follow the same pattern with comprehensive docstrings.

    def run_tests(self):
        """Run test cases on various database operations in UserQueries."""
        pass # Full test case code would go here, with docstring if needed

    def get_user_by_id(self, user_id: int) -> 'User': # type: ignore
        """Retrieve a user's details by their user_id and return a User object."""
        query = """
            SELECT username, email, gender, activityLevel, height, weight, age, protein, fats, carbohydrates, calories 
            FROM Users WHERE user_id = %s
        """
        self.cursor.execute(query, (user_id,))
        result = self.cursor.fetchone()
        if result:
            return 'User'(
                user_id=user_id,
                username=result[0],
                email=result[1],
                gender=result[2],
                activity_level=result[3],
                height=result[4],
                weight=result[5],
                age=result[6],
                protein=result[7],
                fats=result[8],
                carbohydrates=result[9],
                calories=result[10]
            )
        else:
            print("User not found.")
            return None
pydoc.writedoc(UserQueries)